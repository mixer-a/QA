			Модели разработки ПО

Водопадная модель (каскадная, waterfall model)
Проектирование
		\
		 Кодирование
				\
				Тестирование 
						\
						Эксплуатация 
Нельзя вернуться на шаг назад, четкое следование плану, документации. Тестирование с середины развития проекта, достигая максимума в конце. Пример: военное ПО, аэрокосмическая область, медицинское ПО.
Плюсы:
1)	У каждой стадии четкий проверяемый результат
2)	В каждый конкретный момент времени команда выполняет один вид работ
3)	Хорошо работает для небольших задач
Минусы: 
1)	Полная неспособность адаптировать проект к изменениям в требованиях
2)	Крайне позднее создание работающего продукта

V-образная модель

Бизнес- требования                                             Приемочное тестирование
             \                                                   /
       Функциональные требования                            Функциональное тестирование
               \                                               /
             Архитектура системы                        Интеграционное тестирование
                 \                                           /
                 Архитектура компонентов        Модульное тестирование
                                \                          /
                                       Разработка

Тестирование на ранних стадиях развития проекта, на переходах между стадиями.
Плюсы:
1)	У каждой стадии четкий проверяемый результат
2)	Внимание тестированию с первой же стадии
3)	Для проектов со стабильными требованиями
Минусы:
1)	Недостаточная гибкость и адаптивность
2)	Отсутствует раннее прототипирование
3)	Сложность устранения проблем, пропущенных на ранних стадиях развития проекта
Использование: в проектах, в которых существуют какие-то временные и финансовые ограничения; для задач, которые предполагают более широкое по сравнению с каждой моделью тестовое покрытие

Инкрементальная модель


                      Требования — Проектирование
          	    /                             \
Идея - Планирование				   Разработка
		    \                             /           \
                         Оценка — Тестирование                 Развертывание
Большая идея – реализуем частями

Итерационная модель – принцип тот же, но идея изначально маленькая.
Итерации – многократное повторение одних и тех же стадий.
Инкремент – приращивание функциональности продукта
Тестирование на стадии тестирования.
Минусы:
1)	Высокие расходы, вызванные высокой «бюракратезированностью» и общей громоздкостью модели
2)	Недостаточная гибкость внутри итераций
3)	Сложность устранение проблем, пропущенных на ранних стадиях развития проекта
Плюсы: 
1)	Достаточно раннее прототипирование
2)	Простота управления итерациями
3)	Декомпозиция проекта на управляемые итерации

Спиральная модель 

Планирование                  |           Анализ рисков
                              |
                        /  /  | \
_______________________/__/______\_________________________
                       \      |  /
                        \     | /
  Оценка                 \____|/          Разработка

Тестирование на стадии разработки.
Плюсы:
1)	Глубокий анализ рисков
2)	Подходит для крупных проектов
3)	Достаточно раннее прототипирование
Минусы:
1)	Высокие накладные расходы
2)	Сложность применения для небольших проектов
3)	Высокая зависимость успеха от качества анализа рисков

Гибкая модель (Agile model)
Базируется на так называемом «Agile-манифесте»:
1)	Люди и их взаимодействие важнее процессов и инструментов
2)	Работающий продукт важнее исчерпывающей документации
3)	Сотрудничество с заказчиков важнее согласования условий контракта
4)	Готовность к изменениям важнее следования первоначальному плану
Плюсы:
1)	Максимальное вовлечение заказчика
2)	Много работы с требованиями
3)	Тесная интеграция тестирования и разработки
4)	Минимальная документация
Минусы:
1)	Сложность реализации для больших проектов
2)	Сложность построения стабильных процессов
Тестирование в определенные моменты итераций и в любой необходимый момент.
Бэклог – это упорядоченный по приоритету список работ, который планируется выполнить с учетом знаний, имеющихся на данный момент.
Бэклог проекта -> Бэклог спринта -> Спринт до 4 недель -> Результат 
Scrum 

Старт  - Планирование – Разработка – Тестирование – Демонстрация – Повтор 
Митинги:
1)	В начале (sprint planning meeting) и в конце (sprint review  meeting) спринта
2)	Ежедневные (daily meeting): Что делал вчера? Что буду делать сегодня? Какие возникли проблемы
3)	Ретроспектива – подведение итогов, что было сделано
Scrum – мастер (менеджер проекта) – управляет проектом
Product owner – владелец продукта, отвечает за сам продукт (роль бизнес-аналитика)
Участники команды разработки: разработчик, тестировщик, архитектор, бизнес-аналитик, дизайнер. 5-9 человек участвуют полностью в проекте, пользователи не участвуют в разработке, но они участники проекта, потому что они этим пользуются.
Сиейкхолдеры – люди, которые инициировали этот проект, может быть будут принимать итоговый результат.
__________________________________________________________________________________________________________________________________________________
	                |                        Scrum 	                               |                       Kanban                             |
_______________________________________________________________________________________|__________________________________________________________|
График                  |Регулярные спринты фиксированной продолжительности	       |Непрерывный процесс                                       |
--------------------------------------------------------------------------------------------------------------------------------------------------|
Подходы к релизу	|В конце каждого спринта после одобрения владельцем продукта   |Поставка выполняется непрерывно или на усмотрение команды |
--------------------------------------------------------------------------------------------------------------------------------------------------|
Роли	                |Владелец продукта, Scrum – мастер, команда разработки	       |Ролей нет, в некоторых командах работают тренеры по agile |
--------------------------------------------------------------------------------------------------------------------------------------------------|
Ключевые показатели     |Скорость команды	                                       |Продолжительность цикла                                   |
--------------------------------------------------------------------------------------------------------------------------------------------------|
Отношение к изменениям	|В ходе спринты команды стремятся избегать изменений в         |Изменение может произойти в любой момент                  |
                        |прогнозах спринта: изменения приведут к неверным выводам      |                                                          |
                        |относительно оценки задач	                               |                                                          |
--------------------------------------------------------------------------------------------------------------------------------------------------

Scrum:
• Scrum – команда:
    - Product owner – управление бэклогом продукта, описание бэклога
    - Development team – самоорганизация, кроссфункциональность, единственная роль разработчик, коллективная ответственность
    - Scrum – мастер – функционирование scrum, обучение и понимание scrum членами команды
• События :  
1) Планирование спринта
2) Ежедневный scrum
3) Обзор спринта
4) Ретроспектива
• Артефакты:
1) Бэклог продукта
2) Уточнение бэклога продукта
3) Критерии подготовленности
4) Пользовательские истории
5) Покер планирование (ряд Фибоначчи)
6) Бэклог спринта
7) Инкремент продукта
8) Критерии готовности
• Метрики: 
1) Скорость (Velocity) 
2) Емкость (Capacity) 
3) Диаграмма сгорания задач
4) Накопительная диаграмма потока
Story point – абстрактные числа, которые позволяют нам оценить сложность выполнения и реализации нашей user story.

Kanban (визуальный сигнал)
Методика предполагает обсуждение производительности в режиме реального времени и полную прозрачность рабочих процессов. Рабочие задачи визуально представлены на доске Kanban, что позволяет участникам команды видеть состояние каждой задачи в любой момент времени.
 -------------------------------------------------------
| Запланировано | В работе | Сделано |
-------------------------------------------------------
Kanban-карточка:
1) Важная информация о конкретной рабочей задаче
2) Имя ответственного за выполнение задачи
3) Краткое описание выполненной работы
4) Оценка необходимого времени и т.д.
Плюсы:
1) Гибкость планирования
2) Сокращение времени цикла
3) Меньше узких мест (ограничение объема незавершенной работы)
4) Наглядность 
Модель хаоса
Главная задача – всегда решать самую важную задачу в первую очередь.


